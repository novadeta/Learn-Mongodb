Mongodb
mongodb tidak menggunakan SQL.namun menggunakan javascript sebagai bahasa utama untuk
manipulasi document

Mongodb -> Not Only Sql

> Relational Database biasanya menyimpan data dalam bentuk table,dan menyimpan
data dalam bentuk table,dan relasinya disimpan di table lain
> Document oriented database biasanya menyimpan data dalam bentuk JSON
dan menyimpan relasinya sebagai embedded object di dalam document yang sama

Istilah Relational vs Document
Table - Collection
Column - Field
Row,Record - Document
Join Table - Embedded Document,Reference
SQL - Js(Mongodb)

DATABASE
tempat untuk menyimpan Collection
semua collection harus disimpan di database

Command Mongodb CLI

use -> membuat database/berpindah database
show databases/dbs -> melihat semua database
db.dropDatabase() -> delete database
db.getName() > ambil nama database
db.hostInfo() > ambil info host tempat mongodb
db.version() > .....
db.stats() > ambil 

Collection

tempat menyimpan document
max per document yang bisa disimpan adalah 16mb
maximum level nested document yang bisa disimpan adalah 100 level

db.getCollectionNames() > ambil semua nama collection
createCollection(name) > membuat collection baru
getcollection() > ambil object createCollection
db.<name> > sama dengan getcollection

db.<collection>.find() > mencari document
db.<collection>.drop() > hapus collection
db.<collection>.count() > menghitung document di collection

Data Model
pindah dari relational db ke document db bukanlah hal yang sesederhana
hanya dengan memindahkan  semua table ke collection

Schema yang flexible
> di mongodb kita bisa memasukkan data ke collection secara langsung  tanpa mendefinisikan 
schema collectionnya
> Scehma untuk collection di mongodb sangat flexible,tiap document bisa berbeda.tidak seperti
realtional database setiap record harus sama
> namun pada prakteknya,sangat direkomendasikan menggunakan jenis data yang sama
untuk tiap collection,walaupun bisa berbeda beda di collection yang sama.

Primary Key
saat membuat document di mongodb,kita wajib menambahkan primary key
menggunakan field _id
selain itu primary key tidak bisa lebih dari 1 field,hanya bisa filed _id,
jadi jika kita ingin membuat composite primary key,maka kita hanya bisa melakukan dengan menggunakan
1 field _id

Embedded VS Reference
 Embedded : 
> Antar Document saling ketergantungan
> tidak bisa langsung melakukan perubahan ke embedded document
> embedded document selalu dibuthkan ketika mengambil data document

Reference :

> Antar Document bisa berdiri sendiri dan tidak terlalu ketergantungan satu sama
lain
> Bisa melakukan manipulasi data langsung terhadap reference document
> REference document tidak selalu dibuthkan saat mengambil document

BSON
binary JSON yaitu binary encoded serialization document seperti JSON 
kenapa mongodb itu menggunakan BSON karena mongodb itu mendukung tipe data yang bukan
text contohnya img 

Objectid
random data yang unik,cepat untuk digenerate dan terurut
niali objectid memiliki ukuran panjang 12 byte,konsisten terdiri dari 
informasi 4 byte timestamp,5 byte random value dan 3 byte incrementing counter
obejctid digunakan sebagai default _id primary key di document jika kita tidak secara
eksplisit menyebutkan _id documentnya

Date dan ISODate
64 vit integer yang mempresentasikan angka milisecond sejak unix epoch
nilai ini bisa merepresentasikan waktu dengan jarak 290juta tahun sebelum
dan setelah unix epoch
ISODate mereupakan representasi waktu yang digunakan oleh mongoDB
Date ini kompatibel dengan Date JS

Query Document
sama seperti di relational DB,di mongodb kita bisa melakukan query atau 
pencarian document yang sudah kita simpan di collection


Comparison Query Operator

$eq > membandingkan value dengan value lain > ==
$ne > membandingkan value tidak sama dengan value lain > !=
$gt > membandingkan value lebih besat dari value lain > >
$gte > membandingkan value lebih besar atau sama dengan value lain >=
$lt > membandingkan value lebih kecil dari value lain > <
$lte > membandingkan value lebih kecil atau sama dengan value lain > <=
$in > membandingkan value dengan value yang ada di array 
$nin > membandingkan value tidak ada dalam value yang ada di array

Element Operator
$exists > mencocokkan document yang memiliki field tersebut
$type > mencocokkan document yang memiliki type field tersebut

Evaluation Operator
$expr > Menggunakan aggregation operation
$jsonScehma > Validasi document sesuai dengan JSON Schema
$mod > melakukan operasi modulo
$regex > mengambil document sesuai dengan regular expression
$text > Melakukan pencarian menggunakan text
$where > mengambil document dengan Javscript function

Array Query Operator
khusus pengecekan di array
$all > mencocokkan array pada field yang memiliki array kalau ada kembalikan
$elemMatch > mengambil document jika tiap element di array memenuhi kondisi tertentu
$size > mengambil document jika ukuran array sesuai

Projection
pada function find,terdapat parameter kedua setelah query,yaitu Projection
Projection adalah memilih field mana yang ingin kita ambil atau hide
db.<collection>.find(<query>,projection)
kalau 1 > include jadi yang dikasih value 1 aja yang ditampilkan selain field yang dikasih
nilai 1 field lainnya di hide
kalau 0 > di hide jadi field yang dikasi value 0 saja yang di hide

Projection Operator
$ > Limit array hanya mengembalikan data pertama yang match dengan array Operator
$elemMatch >  limit array hanya mengembalikan data pertama yang match dengan kondisi query
$meta > mengembalikan informasi metada yang didapat dari setiap matching document
$slice > mengontrol jumlah data yang ditampilkan pada array

Query Modifier 
query modifier adalah memodifikasi hasil query yang telah kita lakukan
Contoh yang sering kita lakukan seperti,mengubah query menjadi jumlah data,membatasi jumlah data
dengan paging,dan lain lain
untuk memodifikasi hasil query,kita bisa menambahkan fucntion query modifier setelah menggunakan
function find

count > mengambil jumlah data hasil query
limit(size) > membatasi jumlah data yang didapat dari query
skip(size) > menghiraukan data pertama hasil query sejumlah yang ditentukan
sort(query) > mengurutkan hasil data query

Update Document
sama seperti database lainnya,di MongoDB juga kita bisa mengubah document yang sudah kita
insert ke collection
Namun berbeda dengan perintah SQL,di mongodb,untuk mengubah document
kita diberikan beberapa function
untuk update document kita bisa menggunakan collection
updateOne() > mengubah satu document
updateMany > mengubah banayak document sekaligus
replaceOne > mengubah total satu document dengan document yang baru

Field Update Operator

kita sudah tahu kalo untuk update document di MongoDB kita bisa
menggunakan operator $set dan $unset
Namun sebenarnya masih banyak operator yang bisa kita gunakan
$set > mengubah document
$unset > menghapus field
$rename > mengubah nama field di document
$inc > menaikkan nilai number di field sesuai dengan jumlah tertentu
$currentDate > mengubah field menjadi waktu saat ini

Array Update Operator
ketika kita mengubah field dengan tipe array maka seluruh array akan berubah
$ > mengupdate data array pertama sesuai kondisi query
$[] > mengupdate semua data array sesuai kondisi query
$[<identifier>] > mengupdate semua data array yang sesuai kondisi arrayfilters
<index> mengupdate data array sesuai dengan nomor index

$addToSet > menambahkan value ke array,dihiraukan jika sudah ada
$push > menambahkan element ke array
$pop > menghapus element pertama (-1) atau terakhir (1) pada array
$pull > menghapus semua elemnt di array yang sesuai kondisi
$pullAll > menghapus semua element di array

digunakan di push atau addToSet
$each > digunakan di addToset dan push untuk menambahkan  multiple element di array
$position > digunakan di $push untuk mengubah poisis menambahkan data
$slice > digunakan di $push untuk menentukan jumlah maksimal data array
$sort > digunakan untuk mengurutkan array setelah operasi $push

Delete Document
deleteOne(query) > menghapus 1 document
deleteMany(query) > menghapus banyak document

Bulk Write Operation
komunikasi antara aplikasi dengan database biasanya dilakukan secara req - res
artinya tiap perintah yang ingin kita kirimkan dari aplikasi ke database,akan diresponse secara langsung oleh 
database
proses tersebut akan sangat lambat,jika kita menghadapi kasus harus memanipulasi data besar
secara langsung,misal upload data dari file dengan jumlah jutaan ke dalam database
mongodb mendukung bulk write operation,yaitu operasi bulk yang dalam satu request,kita bisa mengirim banyak perintah
fitur ini cocok pada kasus jika kita ingin melakukan operasi bulk atau batch secara banyak sekaligus
inserMany 
updateMany
deleteMany
bulWrite > ketika kita ingin mengkombinasi insert update delete

Schema Validation
pada relational DB,kita biasanya menambahkan constraint terhadap data yang ada di table
misal,maksimal karakter,enum string,not null
di mongodb fitur untuk validasi data lebih canggin dibanding constraint di relational DB
mongoDB mendukung schema validation menggunakan JSON schema

JSON Schema
adadlah standar resmi untuk memvalidasi data JSON
dengan menggunakan JSON Schema kita bisa memberi batasan data JSON apa yang valid
sehingga bisa dimasukkan ke dalam collection

Indexes
index adalah fitur di mongodb untuk mengefisienkan proses query.Tanpa Index, MongoDB 
harus melakukan proses query dengan cara collection scan(mencari keselurh data dari awal sampai akhir)
Jika terdapat Index pada collection MongoDB,MongoDB bisa menggunakan index untuk 
mendapatkan data tanpa harus melakukan pencarian keseluruhu document
Index adalah struktur data khusus yang menyimpan data dalam struktu yang mudah untuk dicari.
index menyimpan spesifik field.lalu mengurutkan data field tersebut.Hal ini tidak hanya
mempermudah ketika proses pencarian,namun mempermudah ketika kita butuh melakukan pencarian dalam 
bentuk range document sperti paging
secara dasar,Index di mongo db,cara kerjanya sama seperti index di relational DB 

Single Field Index
secara default,field _id di mongoDB sudah di index secara otomatis,jadi kita tidak perlu
membuat index lagi secara manual untuk field _id
MongoDB mendukung penuh pembuatan index di semua field yang ada di document. Dengan begitu
ini bisa mempercepat proses query di mongoDB untuk query terhadap field tersebut

Compound Indexes
jika kita butuh melakukan query terhadap lebih dari satu field,kita juga bisa membuat
index terhdapa lebih dari satu field, atau disebut compund Index
MongoDB membatasi pembuatan maksimal field yang bisa dibuat di compound index adalah 32 field

Text Indexes 
MongoDB menyediakan text index untuk mendukung pencarian text di tipe data string
text index tidak hanya bisa digunakan pada field dengan tipe data string,namun juga pada array berisi tipe data string

Wildcard Indexes
MongoDB mendukung wildcard index,dimana ini digunakan untuk membuat index
terhadap field yang belum diketahui atau field yang sering berubah ubah
misal contoh kita punya sebuah emebdded document dengan tipe field customFields,dimana
isinya bisa bebas sesuai dengan data yang dimasukkan.
agar bisa mendukung proses query yang cepat pada field tersebut kita bisa menggunakan wildcard index


Index Properties
mongodb mendukung properties di index
istilah properties di index mungkin agak sedikit membingungkan,sederhananya adalah
menambahkan behaviour atau kemampuan tertentu terhadap index yang kita buat

TTL Index
TTL singkatan dari TIme To Live,yaitu waktu untuk hidup
TTL Index digunakan sebagai waktu hidup document di collection,artinya data akan hilang dalam kurun waktu
tertentu secara otomatis
TTL Index hanya dapat digunakan di field dengan tipe data Date
background proses di MongoDB akan secara regular melakukan penghapusan data secara otomatis
sayangnya proses background tersebut berjalan setiap 60 detik sekali

Unique Index
memastikan bahwa field2 di index tersebut tidak menyimpan data duplicate
contohnya di mongodb field _id secara otomatis merupakan unique index,sehingga
kita tidak bisa membuat documend dengan field _id yang sama

Transaction
di relational db,fitur yang sangat berguna dan banyak orang gunakan adalah fitur Transaction
fitu Transaction secara sederhana adalah menggabungkan beberapa operasi database dalam satu transaction,
dimana transaction akan dianggap sukses jika semua operasi sukses dan transaction
akan dianggap gagal,maka seluruh operasi yang sukses sebelumnya harus dibatalkan (rollback)
fitur transaction di mongodb hanya bisa jalan di cluster (replicat-set),tidak di single node
Dalam cluster,Database di MongoDB akan memiliki primary data dan secondary data
session.startTransaction() > Memulai transaksi
session.commitTransaction() > Commit transaksi
session.abortTransaction() > Mmebatalkan transaksi

Read Preferences
adalah bagaimana MongoDB mengkontrol dari mana kita membaca data
primary: semua query diambil dari primary replica set
primaryPreferred: semua query diambil dari primary replica set,namun jika tidak ada
primary replica set,maka diambil dari secondary replica set
secondaryPreferred : semua query diambil dari secondari replica set,namun jika tidak ada
secondary replica set,maka diambil dari primary replica set
nearest : semua query diambil dari replica set paling murah network latency nya

Read Concern
adalah bagaiman MongoDB mengkontrol data yang kita dapatkan

local: Data akan didapatkan di local node
available: Data akan didapatkan dimanapun (tidak peduli node mana)
majority : data akan didapatkan di mayoritas data di semua node
linearizable : data akan dipastikaa data paling terbaru di semua node
snapshot : data akan diambil dari mayoritas data snapshot(data yang telah di commit) di semua node



Security
secara default,jika kita menjalankan mongoDB,mode yang dijalankan tidaklah aman
tidak ada authentication dan tidak ada Authorization
agar aman kita harus mengaktifkan access control di MongoDB

User Admin 
user admin harus ada terlebih dahulu sebelum kita mengaktifkan access control
user admin adalah user yang memiliki role userAdminAnyDatabase dan readWriteAnyDatabase
setelah membuat user admin,kita bisa menjalankan ulang mongodb dengan perintah --auth

Authorization 
adalah proses yang dilakukan setelah proses authentication sukses
authorization dilakukan untuk melakukan pengecekan apakah user memiliki hak akses untuk melakukan
sebuah action
Hak akses di mongodb disimpan dalam bentuk role

Read > bisa membaca data di semua collection di databasenya 
readWrite > bisa membaca dan mengubah data di semua collection yang bukan sistem collection
dbAdmin > bisa melakukan kemampuan administrasi database
userAdmin > mampu membuat user dan role
dbOwner > kombinasi readWrite,dbAdmin dan userAdmin

All database roles
readAnyDatabse > seperti read role tapi untuk semua database
readWriteAntDatabase > seperti readWrite role,tapi untuk semua database
userAdminAnyDatabase > seperti userAdmin tapi untuk semua database
dbAdminAnyDatabase > sepeprti dbAdmin tapi untuk semua database

Backup & Restore roles
backup > kemampuan untuk melakukan backup database
restore > kemampuan untuk melakukan restore database
 
root > bisa melakukan apapun
privilage
r